@keyframes mat-progress-spinner-linear-rotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@at-root {
  $start: (1 - 0.05) * $_default-circumference; // start the animation at 5%
  $end: (1 - 0.8) * $_default-circumference; // end the animation at 80%
  $fallback-iterations: 4;

  @keyframes mat-progress-spinner-stroke-rotate-100 {
    // .0001 percentage difference is necessary in order to avoid unwanted animation frames
    // for example because the animation duration is 4 seconds, .1% accounts to 4ms
    // which are enough to see the flicker described in
    // https://github.com/angular/components/issues/8984
    //
    // NOTE: this is replaced by js for any diameter other that 100
    0% {
      stroke-dashoffset: $start;
      transform: rotate(0);
    }
    12.5% {
      stroke-dashoffset: $end;
      transform: rotate(0);
    }
    12.5001% {
      stroke-dashoffset: $end;
      transform: rotateX(180deg) rotate(72.5deg);
    }
    25% {
      stroke-dashoffset: $start;
      transform: rotateX(180deg) rotate(72.5deg);
    }

    25.0001% {
      stroke-dashoffset: $start;
      transform: rotate(270deg);
    }
    37.5% {
      stroke-dashoffset: $end;
      transform: rotate(270deg);
    }
    37.5001% {
      stroke-dashoffset: $end;
      transform: rotateX(180deg) rotate(161.5deg);
    }
    50% {
      stroke-dashoffset: $start;
      transform: rotateX(180deg) rotate(161.5deg);
    }

    50.0001% {
      stroke-dashoffset: $start;
      transform: rotate(180deg);
    }
    62.5% {
      stroke-dashoffset: $end;
      transform: rotate(180deg);
    }
    62.5001% {
      stroke-dashoffset: $end;
      transform: rotateX(180deg) rotate(251.5deg);
    }
    75% {
      stroke-dashoffset: $start;
      transform: rotateX(180deg) rotate(251.5deg);
    }

    75.0001% {
      stroke-dashoffset: $start;
      transform: rotate(90deg);
    }
    87.5% {
      stroke-dashoffset: $end;
      transform: rotate(90deg);
    }
    87.5001% {
      stroke-dashoffset: $end;
      transform: rotateX(180deg) rotate(341.5deg);
    }
    100% {
      stroke-dashoffset: $start;
      transform: rotateX(180deg) rotate(341.5deg);
    }
    // stylelint-enable
  }
  // For IE11 and Edge, we fall back to simply rotating the spinner because
  // animating stroke-dashoffset is not supported. The fallback uses multiple
  // iterations to vary where the spin "lands".
  @keyframes mat-progress-spinner-stroke-rotate-fallback {
    @for $i from 0 through $fallback-iterations {
      $percent: 100 / $fallback-iterations * $i;
      $offset: 360 / $fallback-iterations;
      #{$percent}% {
        transform: rotate(#{$i * (360 * 3 + $offset)}deg);
      }
    }
  }
}
